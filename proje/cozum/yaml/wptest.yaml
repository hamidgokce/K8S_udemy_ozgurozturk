apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-test-claim
  namespace: test
  labels:
    tier: test
    app: mysql
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 5Gi

# Test namespacesinde mysql-test-claim isimli persistentvolumeclaim olusturuyoruz
# bununla bir pv olusturulacak ve biz pv yi mysql e baglayacagiz

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wp-test-claim
  namespace: test
  labels:
    tier: test
    app: wordpress
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 5Gi

# Test namespacesinde wp-test-claim isimli persistentvolumeclaim olusturuyoruz
# storage class tanimlamadik bu sebeple de default storage class i kullanacak

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  namespace: test
  labels:
    tier: test
    app: mysql
spec:
  selector:
    matchLabels:
      tier: test
      app: mysql
  strategy:
    type: Recreate # herseferinde silsin tekrar olustursun
  template:
    metadata:
      labels:
        tier: test
        app: mysql
    spec:
      containers:
      - name: mysql-test
        image: mysql:5.6
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-test-secret # daha once olusturdugumuz secret objesinden almaktayiz
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-test-secret
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-test-secret
              key: MYSQL_PASSWORD
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-test-secret
              key: MYSQL_DATABASE      
        resources:
          limits:
            memory: "1Gi"
            cpu: "250m"
        ports:
          - containerPort: 3306 # mysql in calisacagi port
            name: mysql-test-port
        volumeMounts:
          - name: mysql-test-pv
            mountPath: /var/lib/mysql
      volumes:
        - name: mysql-test-pv
          persistentVolumeClaim:
            claimName: mysql-test-claim
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wp-deployment
  namespace: test
  labels:
    tier: test
    app: wordpress
spec:
  selector:
    matchLabels:
      tier: test
      app: wordpress
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        tier: test
        app: wordpress
    spec:
      containers:
      - image: wordpress:5.6
        name: wp-test
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql-test-svc # wordpress mysql e mysql service uzerinden baglanmaktadir
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-test-secret
              key: MYSQL_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-test-secret
              key: MYSQL_PASSWORD
        - name: WORDPRESS_DB_NAME
          valueFrom:
            secretKeyRef:
              name: mysql-test-secret
              key: MYSQL_DATABASE
        resources:
          limits:
            memory: "1Gi"
            cpu: "250m"
        ports:
        - containerPort: 80 # web uygulamasi 80 portundan calismaktadir
          name: wp-test-port
        volumeMounts:
        - name: wp-test-pv
          mountPath: /var/www/html
      volumes:
      - name: wp-test-pv
        persistentVolumeClaim:
          claimName: wp-test-claim
      affinity:
        podAffinity: # Her iki uygulama da ayni worker uzerinde schedule edilecek
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions: # app=mysql isimli label a sahip bir pod uzerinde deploy edilsin
              - key: app
                operator: In
                values:
                - mysql
            topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service # cluster icerisnden mysql e erisilebilmesi icin
metadata:
  name: mysql-test-svc
  namespace: test
  labels:
    tier: test
spec:
  selector:
    tier: test
    app: mysql
  ports:
  - port: 3306
    targetPort: 3306
---
apiVersion: v1
kind: Service # ingress ile daha sonra dis dunyaya expose edebilmemiz icin
metadata:
  name: wp-test-svc
  namespace: test
  labels:
    tier: test
    app: wordpress
spec:
  selector:
    tier: test
    app: wordpress
  ports:
  - port: 80
    targetPort: 80