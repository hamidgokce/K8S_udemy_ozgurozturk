apiVersion: v1
kind: ServiceAccount
metadata:
  name: testsa # olusturulacak bu hesap varsayilan olarak yetkileri olmaz / bu sebeple asagida default namespacede pod okuma yetkisi olusturulmaktadir
  namespace: default
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: podread
  namespace: default
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: testsarolebinding # olusturulan pod okuma rolunu bind edecegimiz yer
  namespace: default
subjects:
- kind: ServiceAccount
  name: testsa
  apiGroup: ""
roleRef:
  kind: Role
  name: podread
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Pod
metadata:
  name: testpod
  namespace: default
spec:
  serviceAccountName: testsa # service accountunu podlara baglama / poda hangi service accountun atanacagi belirtiliyor 
  containers:
  - name: testcontainer
    image: ozgurozturknet/k8s:latest
    ports:
    - containerPort: 80

# kubernetes api serverina sadece kullanicilarin erismesi yeterli degil
# pod icerisine deploy ettigimiz uygulamalarinda api ile gorusmesi gerekir

# uygulamalarin authenticate olmasi icin service accountlar mevcut

# kubectl config use-context minikube
# kubectl apply -f serviceaccount.yaml

#  kubectl get sa
  # kubernetes hernamespace default isimli bir service account olustur. her poda bu service account baglanir 

# kubectl get pod
# kubectl exec -it testpod -- bash

  # cd /var/run/secrets/kubernetes.io/serviceaccount/
  # ls 
      # ca.crt     namespace  token
      # service account icin secret olusturulur. secret da 3 bilgi bulur. 
        # 1- service account un olusturuldu namespacenin adi
        # 2- kubernetes api serveri ile iletisim kurarken https, tls baglantisi kurmamiz gerektiginden bu baglantinin hata vermemesi adina gerekli sertifika bilgisi
        # 3- kimlik dogrulamasinda kullanilacak bir json web token bilgisi

# amacimiz kubernetes api server ile konusmak ama pod nasil erisecek
# her kubernetes cluster kurulumunda kubernets icerisinden api servera erisilebilsin diye kubernetes isimli bir service olusturulur.
  # kubectl get svc
    # NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
    # kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   106m

# her podun icerisinde yukaridaki ismi girersek api servera erisebiliriz.

# curl ile http protokolu uzerinden api ye ulasacagiz

      #   curl --insecure https:/kubernetes
      # {
      #   "kind": "Status",
      #   "apiVersion": "v1",
      #   "metadata": {},
      #   "status": "Failure",
      #   "message": "forbidden: User \"system:anonymous\" cannot get path \"/\"",
      #   "reason": "Forbidden",
      #   "details": {},
      #   "code": 403

  # token dosyaisini variable olarak tanimlayalim

  # bash-5.0# TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
  # bash-5.0# echo $TOKEN

  # curl --insecure https:/kubernetes --header "Authorization:Bearer $TOKEN" ==> testsa ile authentica olduk ama forbidden dedi. cunku roota erismek istiyoruz. 
  # fakat yetkimiz yok. olusturdumuz role default namespace de pod read yetkisi olen rolu buna bind et. get,watch,list haklarina sahip olsun

# asagidaki sorgulamayi yapabiliriz
  # curl --insecure https:/kubernetes/api/v1/namespaces/default/pods --header "Authorization:Bearer $TOKEN"
  # curl --insecure https:/kubernetes/api/v1/namespaces/default/pods --header "Authorization:Bearer $TOKEN" | jq '.items[].metadata.name'