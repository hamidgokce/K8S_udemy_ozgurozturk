apiVersion: v1
kind: Secret
metadata:
  name: mysecret # secret obje ismi
type: Opaque # 8 ayri cesitte secret atayabiliriz.
stringData: # 3 hassas bilgi giriyoruz
  db_server: db.example.com
  db_username: admin
  db_password: P@ssw0rd!

# atanacak secret ile pod ayni namespace icerisinde olmali
# kubectl apply -f secret.yaml 
# kubectl get secret
# kubectl describe secret mysecret

    # --from-literal
# imperative yol (yaml file da Opaque ama imperative de generic yaziliyor)
  # kubectl create secret generic mysecret2 --from-literal=db_server=db.example.com --from-literal=db_username=admin --from-literal=db_password=P@ssw0rd!
  # bu method da bir sorunumuz var. bu bilgileri shell de girdik. shell historysine ulasan bilgilere ulasir.


    # --from-file
# komuttaki sifreleri txt olarak girdik. 
  # kubectl create secret generic mysecret3 --from-file=db_server=server.txt --from-file=db_username=username.txt --from-file=db_password=password.txt
 
# kubectl create secret generic mysecret4 --from-file=config.json


# olusturulan bu degerleri poda aktarma ==> volume veya env variable ile



# NOTE = Secretlar sayesinde hassas verilerimizi yaml filelarindan ve container imagelerinden ayirabiliyoruz.
# Bu bilgiler etcd de base64 encode olarak tutulmaktadirlar. Yani encrypted degil. 
# Cloud service saglayicilarinda otomatik olarak encrypted yapilacak ayarlar var.
# Kendi kurdugumuz ve yonettigimiz clusterlarda ise bu islemi bizim yapmamiz gerekmektedir. Dokumantasyondan ayrintilarina ulasilabilir.