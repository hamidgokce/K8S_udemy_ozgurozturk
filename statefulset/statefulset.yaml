apiVersion: v1
kind: Service
metadata:
  labels:
    app: cassandra
  name: cassandra
spec:
  clusterIP: None # su ana kadar olusturdugumuz service tanimlarina benziyor sadece bu kisim farkli 
  # halihazirda ip yok fakat yeni olusturlan podlarin ip leri atanacak
  ports:
  - port: 9042
  selector:
    app: cassandra
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cassandra
  labels:
    app: cassandra
spec:
  serviceName: cassandra
  replicas: 3
  selector:
    matchLabels:
      app: cassandra
  template: # olusturulmasini istedigimiz pod tanimi
    metadata:
      labels:
        app: cassandra
    spec:
      terminationGracePeriodSeconds: 1800
      containers:
      - name: cassandra
        image: gcr.io/google-samples/cassandra:v13
        imagePullPolicy: Always
        ports:
        - containerPort: 7000
          name: intra-node
        - containerPort: 7001
          name: tls-intra-node
        - containerPort: 7199
          name: jmx
        - containerPort: 9042
          name: cql
        resources:
          limits:
            cpu: "500m"
            memory: 1Gi
          requests:
            cpu: "500m"
            memory: 1Gi
        securityContext:
          capabilities:
            add:
              - IPC_LOCK
        lifecycle:
          preStop:
            exec:
              command: 
              - /bin/sh
              - -c
              - nodetool drain
        env:
          - name: MAX_HEAP_SIZE
            value: 512M
          - name: HEAP_NEWSIZE
            value: 100M
          - name: CASSANDRA_SEEDS
            value: "cassandra-0.cassandra.default.svc.cluster.local"
          - name: CASSANDRA_CLUSTER_NAME
            value: "K8Demo"
          - name: CASSANDRA_DC
            value: "DC1-K8Demo"
          - name: CASSANDRA_RACK
            value: "Rack1-K8Demo"
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - /ready-probe.sh
          initialDelaySeconds: 15
          timeoutSeconds: 5
        volumeMounts:
        - name: cassandra-data
          mountPath: /cassandra_data
  volumeClaimTemplates: # her bir pod icin pvc olusturulmasini istiyoruz. pvc lerde standart isimli storageclassi kullanarak pv olusturacaklar. Her poda ayri pv
  - metadata:
      name: cassandra-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: standard
      resources:
        requests:
          storage: 1Gi

# Deploymenta benzeyen bir obje ama 3 temel fark mevcut
  # olusturulan her pod pvc de belirlenen bir pv ye sahip olur yani her podun kendine ait pv si olur
  # podlar sirayla olusturulur ve sirayla silinir
  # Her poda statefulset adi ve 1,2,3 gibi isimler verilir


# kubectl get pods -w
# kubectl get pvc -w
# kubectl apply -f statefulset.yaml

# kubectl exec cassandra-0 -- nodetool status
  # 3 instancesi bulunan cassandra cluster i ayaga kaldirildi

# cluster i 5 poda cikaralim
# kubectl scale statefulset cassandra --replicas=5
  # iki pod ekleniyor ama sirayla
# manual podu silelim
  # kubectl delete pod cassandra-2
    # terminate edildikten sonra ayni isimler tekrar olusturuldugunu gorebiliriz
# kubectl scale statefulset cassandra --replicas=2
  # oncelikle en son sonra bir oncesi siliniyor


# kubectl get svc
  # headless service
# kubectl run -it test --image=busybox -- sh
  # cassandra isimli serviceye gitmek istersek her seferinde ayri ip donuyor
    # ping cassandra
    # ping cassandra-1 
      # load balancing imkani saglamaktadir