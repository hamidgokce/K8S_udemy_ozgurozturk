apiVersion: apps/v1
kind: DaemonSet # deploymenttan farki rollout ozelliklerini kullanmiyoruz
metadata:
  name: logdaemonset
  labels:
    app: fluentd-logging
spec:
  selector: # daemonset olusturacagi podlari selector a gore secer
    matchLabels:
      name: fluentd-elasticsearch
  template:
    metadata:
      labels:
        name: fluentd-elasticsearch
    spec:
      tolerations: # daemonsetin master nodelarda da pod olusturmasina ihtiyac duyuyorsak asagidakini eklememiz gerekir
      # this toleration is to have the daemonset runnable on master nodes
      # remove it if your masters can't run pods
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      containers:
      - name: fluentd-elasticsearch
        image: quay.io/fluentd_elasticsearch/fluentd:v2.5.2 # olusacak pod imagesi / bilinen bir log toplama imagesi / sistemdeki master node dahil tum podlarda olusacak
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
      terminationGracePeriodSeconds: 30
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers

# 20 worker node dan olusan kubernetes cluster mevcut
# Worker node larin tamaminda calisan uygulamamiz mevcut 
# Olusan loglari merkezi sunucaya gondermek istiyoruz
# DaemonSet deployment objesine benzer
# DaemonSet objesi olusturulunca sistemdeki tum nodelar uzerinde template tanimina gore pod olusturur. 
# Varsayilan olarak her nodun uzerinde bir pod olusturulur. sadece belirli tiplerdeki nodelar uzerinde de calismasini saglayabiliriz.
# Log toplama uygulamalari, storage provision uygulamalari kolay sekilde deploy etmeye yarar.
# Her yeni node icinde pod olusturmasini otomatize eder

# kubectl apply -f daemonset.yaml
# kubectl get daemonset -w
  # desired 1 
# minikube node add     ==> ikinci worker node eklenecek
  # desired 2 (kubectl get nodes)
  # sistemde iki tane node var ve bu nodelarin uzerinde pod olusturulmali bu sebeple 2 ye cikti

# kubectl get pods 
  # iki pod mevcut / bir podu silersek tekrar olusturulacak